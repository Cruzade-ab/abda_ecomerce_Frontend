 const section = product.section
    const renderColorOptions = () => {
        return (
            <div className="relative">
                <button
                    type="button"
                    className="inline-flex justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    id="menu-button"
                    aria-expanded={dropdownOpen}
                    aria-haspopup="true"
                    onClick={() => setdropdownOpen(!dropdownOpen)}
                >
                    {selectedColor ? selectedColor.color_name : 'Select Color'}
                </button>
                {dropdownOpen && (
                    <div className="absolute z-10 mt-2 bg-white shadow-lg rounded-md">
                        {product.products.map((variant, index) => (
                            <button
                                key={index}
                                className="block w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                onClick={() => handleColorChange(variant.color)}
                            >
                                {variant.color.color_name}
                            </button>
                        ))}
                    </div>
                )}
            </div>
        );
    };
    

 return (
       <>
        <MainLayout children={undefined} isAdmin={false} onCategoryChange={function (_category: string): void {
                throw new Error('Function not implemented.');
            } }/>
        <div className=" container mx-auto">
        <div className='flex gap-4'>
            <div className='grid gap-4 grid-cols-2'>
            
            {product.products.map((productVariant, index) => (
            <React.Fragment key={index}>
           <img
               
                className='rounded-lg border border-transparent shadow-xl'
                src={selectedColor ? productVariant.image_url : productVariant.color.image_url}
                alt={`Image of ${selectedColor ? selectedColor.color_name : productVariant.color.color_name}`}
                onLoad={() => console.log("Image loaded successfully")}
                onError={() => console.error("Error loading image")}
                    />

            <img
                key={index}
                className="rounded-lg border border-transparent shadow-xl"
                src={selectedColor ?productVariant.hover_image_url :productVariant.color.hover_image_url}
                alt={`Image of ${selectedColor ? selectedColor.color_name :productVariant.color.color_name}`}
                onLoad={() => console.log("Hover Image loaded successfully")}
                onError={() => console.error("Error loading hover image")}
                    />
            </React.Fragment>

                ))}
                
         </div>
            <div className='flex-1 p-4 rounded-lg  border border-gray-200'>
              <div className='text-sm'>
                <p>{section.section_name}</p> 
               
              </div> 
              <div className='text-2xl'>
                <h1>{product.general_product_name}</h1>
              </div>
              <div className='py-3 text-base'>
               <p>{product.description}</p>
              </div> 
              <div className='text-3xl'>
              <p>${product.products[0].value}</p>
              </div>
              <div className="py-3 inline-block text-left">
                            <h2>Select Color:</h2>
                            <div className="flex">
                                {renderColorOptions()}
                                
                            </div>
                        </div>
            
            </div>
        </div> 
    </div>
    </>
    );
};



export default ProductDetailPage;
----------------------------------------------------------------------------------------------------------

    const renderColorOptions = () => {
        return (
            <div className="relative">
                <button
                    type="button"
                    className="inline-flex justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                    id="menu-button"
                    aria-expanded={dropdownOpen}
                    aria-haspopup="true"
                    onClick={() => setdropdownOpen(!dropdownOpen)}
                >
                    {selectedColor ? selectedColor.color_name : 'Select Color'}
                </button>
                {dropdownOpen && (
                    <div className="absolute z-10 mt-2 bg-white shadow-lg rounded-md">
                        {product.products.map((variant, index) => (
                            <button
                                key={index}
                                className="block w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                onClick={() => handleColorChange(variant.color)}
                            >
                                {variant.color.color_name}
                            </button>
                        ))}
                    </div>
                )}
            </div>
        );
    };

    return (
       <>
        <MainLayout children={undefined} isAdmin={false} onCategoryChange={function (_category: string): void {
            throw new Error('Function not implemented.');
        } }/>
           <div className="container mx-auto">
                <div className='flex gap-4'>
                    <div className='grid gap-4 grid-cols-2'>
                        <img
                            className='rounded-lg border border-transparent shadow-xl'
                            src={selectedColor ? selectedColor.image_url : ''}
                            alt={`Image of ${selectedColor ? selectedColor.color_name : ''}`}
                        />
                        <img
                            className="rounded-lg border border-transparent shadow-xl"
                            src={selectedColor ? selectedColor.hover_image_url : ''}
                            alt={`Image of ${selectedColor ? selectedColor.color_name : ''}`}
                        />
                    </div>
                    <div className='flex-1 p-4 rounded-lg border border-gray-200'>
                        <div className='text-sm'>
                            <p>{product?.section.section_name}</p>
                        </div>
                        <div className='text-2xl'>
                            <h1>{product?.general_product_name}</h1>
                        </div>
                        <div className='py-3 text-base'>
                            <p>{product?.description}</p>
                        </div>
                        <div className='text-3xl'>
                            <p>${product?.products[0].value}</p>
                        </div>
                        <div className="py-3 inline-block text-left">
                            <h2>Select Color:</h2>
                            <div className="flex">
                                {renderColorOptions()}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );

};

export default ProductDetailPage;